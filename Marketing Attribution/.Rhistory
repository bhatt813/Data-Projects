item <- dbGetQuery(db, "SELECT * FROM item")
sale <- dbGetQuery(db, "SELECT * FROM sale")
user_device <- dbGetQuery(db, "SELECT * FROM user_device")
user <- dbGetQuery(db, "SELECT * FROM user")
View(attribution)
(3809-36)/3809
View(sale)
Sale_Campaign <- dbGetQuery(db,
"SELECT a.user_id, a.sales_id, a.sale_dt AS sale_date, a.amount, b.campaign, b.created_on AS campaign_dt
FROM attribution b
JOIN user_device d on b.device_id = d.device_id
JOIN (SELECT a.user_id, a.created_on as sale_dt, a.id AS sales_id,a.amount
FROM sale a
GROUP BY 1,2,3,4) a ON a.user_id = d.user_id
GROUP BY 1,2,3,4,5,6")
Sale_Campaign %>% group_by(campaign) %>% summarise(mean = mean(days_to_sale), median = median(days_to_sale), min(days_to_sale), max(days_to_sale)) %>% arrange((mean))
num_devices <- dbGetQuery(db,
"SELECT a.device_id as Device, count(distinct a.user_id) as user_count,
FROM user_device a
GROUP BY 1
ORDER BY 2 desc")
require(RSQLite)
require(XLConnect)
require(dplyr)
require(ggplot2)
location_csv <- "/Users/neilbhatt/Documents/Earnin/AssessmentData/"
db <- dbConnect(SQLite(), dbname="Earnin.sqlite")
dbWriteTable(conn=db, name = "attribution", value=paste0(location_csv,"attribution.csv"))
remove(db)
require(RSQLite)
require(XLConnect)
require(dplyr)
require(ggplot2)
location_csv <- "/Users/neilbhatt/Documents/Earnin/AssessmentData/"
db <- dbConnect(SQLite(), dbname="Earnin.sqlite")
dbWriteTable(conn=db, name = "attribution", value=paste0(location_csv,"attribution.csv"))
remove(db)
require(RSQLite)
require(XLConnect)
require(dplyr)
require(ggplot2)
location_csv <- "/Users/neilbhatt/Documents/Earnin/AssessmentData/"
db <- dbConnect(SQLite(), dbname="Earnin.sqlite")
dbWriteTable(conn=db, name = "attribution", value=paste0(location_csv,"attribution.csv"))
dbWriteTable(conn=db, name = "device", value=paste0(location_csv,"device.csv"))
dbWriteTable(conn=db, name = "item", value=paste0(location_csv,"item.csv"))
dbWriteTable(conn=db, name = "sale", value=paste0(location_csv,"sale.csv"))
dbWriteTable(conn=db, name = "user_device", value=paste0(location_csv,"user_device.csv"))
dbWriteTable(conn=db, name = "user", value=paste0(location_csv,"user.csv"))
num_devices <- dbGetQuery(db,
"SELECT a.device_id as Device, count(distinct a.user_id) as user_count,
FROM user_device a
GROUP BY 1
ORDER BY 2 desc")
num_devices <- dbGetQuery(db,
"SELECT a.device_id as Device, count(distinct a.user_id) as user_count
FROM user_device a
GROUP BY 1
ORDER BY 2 desc")
View(num_devices)
num_devices %>% group_by(user_count)%>%tally(sort = TRUE)
Sale_Campaign <- dbGetQuery(db,
"SELECT a.user_id, a.sales_id, a.sale_dt AS sale_date, a.amount, b.campaign, b.created_on AS campaign_dt
FROM attribution b
JOIN user_device d on b.device_id = d.device_id
JOIN (SELECT a.user_id, a.created_on as sale_dt, a.id AS sales_id,a.amount
FROM sale a
GROUP BY 1,2,3,4) a ON a.user_id = d.user_id
GROUP BY 1,2,3,4,5,6")
Sale_Campaign$campaign_dt<- as.Date(Sale_Campaign$campaign_dt, '%m/%d/%y %H:%M')
Sale_Campaign$sale_date <- as.Date(Sale_Campaign$sale_date, '%Y-%m-%d %H:%M:%OS')
Sale_Campaign$days_to_sale <- Sale_Campaign$sale_date - Sale_Campaign$campaign_dt
Sale_Campaign <- subset(Sale_Campaign, Sale_Campaign$days_to_sale >= 0)
Sale_Campaign %>% group_by(campaign) %>% summarise(mean = mean(days_to_sale), median = median(days_to_sale), min(days_to_sale), max(days_to_sale)) %>% arrange((mean))
tt <- table(Sale_Campaign$sales_id)
Sale_Campaign_1 <- subset(Sale_Campaign, Sale_Campaign$sales_id %in% names(tt[tt == 1]))
Sale_Campaign_2 <- subset(Sale_Campaign,!(Sale_Campaign$sales_id %in% Sale_Campaign_1$sales_id))
View(Sale_Campaign_1)
View(Sale_Campaign_2)
Sale_Campaign_3 <- subset(Sale_Campaign_2, Sale_Campaign_2$days_to_sale <366)
Sale_Campaign_3 <- subset(Sale_Campaign_2, Sale_Campaign_2$days_to_sale <366)
Boxplot <- boxplot(as.numeric(Sale_Campaign_3$days_to_sale), main="Days to Sale Box Plot", ylab="Days to Sale")
Boxplot <- boxplot(as.numeric(Sale_Campaign_3$days_to_sale), main="Days to Sale Box Plot <=365 days", ylab="Days to Sale")
tt <- table(Sale_Campaign$sales_id)
Sale_Campaign_1 <- subset(Sale_Campaign, Sale_Campaign$sales_id %in% names(tt[tt == 1]))
Boxplot <- boxplot(as.numeric(Sale_Campaign_1$days_to_sale), main="Days to Sale Box Plot", ylab="Days to Sale")
plot(x=1:nrow(Sale_Campaign_1), y=Sale_Campaign_1$days_to_sale)
Sale_Campaign_1 <- order(Sale_Campaign_1$days_to_sale)
plot(x=1:nrow(Sale_Campaign_1), y=Sale_Campaign_1$days_to_sale)
View(Sale_Campaign_2)
tt <- table(Sale_Campaign$sales_id)
Sale_Campaign_1 <- subset(Sale_Campaign, Sale_Campaign$sales_id %in% names(tt[tt == 1]))
Boxplot <- boxplot(as.numeric(Sale_Campaign_1$days_to_sale), main="Days to Sale Box Plot", ylab="Days to Sale")
Sale_Campaign_1 <- Sale_Campaign_1[order(days_to_sale),]
Sale_Campaign_1 <- Sale_Campaign_1[order(Sale_Campaign_1$days_to_sale),]
plot(x=1:nrow(Sale_Campaign_1), y=Sale_Campaign_1$days_to_sale)
Sale_Campaign_1 <- Sale_Campaign_1[order(Sale_Campaign_1$days_to_sale),]
Sale_Campaign_1a <- subset(Sale_Campaign_1, Sale_Campaign_1$days_to_sale > 730)
plot(x=1:nrow(Sale_Campaign_1a), y=Sale_Campaign_1a$days_to_sale)
install.packages("ChannelAttribution")
require(RSQLite)
require(XLConnect)
require(dplyr)
require(ggplot2)
location_csv <- "/Users/neilbhatt/Documents/Earnin/AssessmentData/"
db <- dbConnect(SQLite(), dbname="Earnin.sqlite")
dbWriteTable(conn=db, name = "attribution", value=paste0(location_csv,"attribution.csv"))
Sale_Campaign <- Sale_Campaign[order(Sale_Campaign$days_to_sale),]
plot(x=1:nrow(Sale_Campaign), y=Sale_Campaign$days_to_sale)
require(RSQLite)
require(XLConnect)
require(dplyr)
require(ggplot2)
location_csv <- "/Users/neilbhatt/Documents/Earnin/AssessmentData/"
db <- dbConnect(SQLite(), dbname="Earnin.sqlite")
dbWriteTable(conn=db, name = "attribution", value=paste0(location_csv,"attribution.csv"))
Sale_Campaign_org <- Sale_Campaign[order(sales_id, campaign_dt),]
Sale_Campaign_org <- Sale_Campaign[order(Sale_Campaign$sales_id, Sale_Campaign$campaign_dt),]
View(Sale_Campaign_org)
install.packages('reshape2')
library(reshape2)
Sale_Campaign_org <- Sale_Campaign[order(Sale_Campaign$sales_id, Sale_Campaign$campaign_dt),]
Sale_wide <- dcast(Sale_Campaign_org, sales_id ~ variable, fun.aggregate = mean())
Sale_wide <- dcast(Sale_Campaign_org, sales_id ~ campaign, fun.aggregate = mean())
Sale_Campaign_org$campaign_touch_counter <- sequence(tabulate(Sale_Campaign_org$sales_id))
Sale_Campaign_org %>% group_by(Sale_Campaign_org$sales_id) %>% mutate(id = row_number())
Sale_Campaign_org %>% group_by(sales_id) %>% mutate(id = row_number())
Sale_Campaign_org <- Sale_Campaign_org %>% group_by(sales_id) %>% mutate(id = row_number())
Sale_Campaign_org <- Sale_Campaign_org %>% group_by(sales_id) %>% mutate(id = row_number())
Sale_Campaign_wide <- dcast(Sale_Campaign_org, sales_id ~ id)
Sale_Campaign_org <- Sale_Campaign_org %>% group_by(sales_id) %>% mutate(ida = row_number())
Sale_Campaign_wide <- dcast(Sale_Campaign_org, sales_id ~ ida, value.var = 'mean', fun.aggregate = mean)
Sale_Campaign_wide <- data.frame(Sale_Campaign_org$sales_id,Sale_Campaign_org$campaign, Sale_Campaign_org$id)
View(Sale_Campaign_wide)
Sale_Campaign_wide <- names('sales_id','campaign','id')
names(Sale_Campaign_wide) <- c('sales_id','campaign','id')
Sale_Campaign_wide <- melt(Sales_Campaign_wide, id.vars = c("sales_id","id"))
Sale_Campaign_wide <- data.frame(Sale_Campaign_org$sales_id,Sale_Campaign_org$campaign, Sale_Campaign_org$id)
names(Sale_Campaign_wide) <- c('sales_id','campaign','id')
Sale_Campaign_wide <- melt(Sales_Campaign_wide, id.vars = c("sales_id","id"))
Sale_Campaign_wide <- melt(Sale_Campaign_wide, id.vars = c("sales_id","id"))
Sale_Campaign_wide <- dcast(Sale_Campaign_wide, sales_id ~ id)
Sales <- data.frame(Sale_Campaign$sales_id, Sale_Campaign$amount)
View(Sales)
names(Sales) <- c('sales_id','amount')
Sales <- merge(Sale_Campaign, Sales, by = 'sales_id')
Sales <- merge(Sale_Campaign_wide, Sales, by = 'sales_id')
library(reshape2)
Sale_Campaign_org <- Sale_Campaign[order(Sale_Campaign$sales_id, Sale_Campaign$campaign_dt),]
Sale_Campaign_org <- Sale_Campaign_org %>% group_by(sales_id) %>% mutate(ida = row_number())
Sale_Campaign_wide <- data.frame(Sale_Campaign_org$sales_id,Sale_Campaign_org$campaign, Sale_Campaign_org$id)
Sale_Campaign_wide <- data.frame(Sale_Campaign_org$sales_id,Sale_Campaign_org$campaign, Sale_Campaign_org$ida)
names(Sale_Campaign_wide) <- c('sales_id','campaign','id')
Sale_Campaign_wide <- melt(Sale_Campaign_wide, id.vars = c("sales_id","id"))
Sale_Campaign_wide <- dcast(Sale_Campaign_wide, sales_id ~ id)
Sales <- data.frame(Sale_Campaign$sales_id, Sale_Campaign$amount)
names(Sales) <- c('sales_id','amount')
Sales <- merge(Sale_Campaign_wide, Sales, by = 'sales_id')
Sales <- data.frame(Sale_Campaign$sales_id, Sale_Campaign$amount)
names(Sales) <- c('sales_id','amount')
Sales <- dbGetQuery(db, "SELECT a.id AS sales_id,a.amount FROM sale a GROUP BY 1,2")
View(Sales)
Sales <- merge(Sale_Campaign_wide, Sales, by = 'sales_id')
Sales$path <- paste(Sales$`1`, Sales$`2`, Sales$`3`, Sales$`4`, Sales$`5`, Sales$`6`,Sales$`7`,Sales$`8`,Sales$`9`,Sales$`10`,Sales$`11`,Sales$`12`,Sales$`13`,sep=">")
Sales_Table <- Sales %>% group_by(path)%>%summarise(amount = sum(amount)) %>%tally(sort = TRUE)
View(Sales_Table)
Sales_Table <- Sales %>% group_by(path)%>%summarise(amount = sum(amount))
View(Sales_Table)
Sales_Table_2 <- Sales %>% group_by(path)%>%tally(sort = TRUE)
Sales_Table <- merge(Sales_Table, Sales_Table_2. by = path)
Sales_Table <- merge(Sales_Table, Sales_Table_2, by = path)
View(Sales_Table_2)
Sales_Table <- merge(Sales_Table, Sales_Table_2, by = path)
Sales_Table <- merge(Sales_Table, Sales_Table_2, by = 'path')
names(Sales_Table) <- c('path','total_conversion_value','total_conversions')
Sales[is.na(Sales)] <- 0
Sales$path <- paste(Sales$`1`, Sales$`2`, Sales$`3`, Sales$`4`, Sales$`5`, Sales$`6`,Sales$`7`,Sales$`8`,Sales$`9`,Sales$`10`,Sales$`11`,Sales$`12`,Sales$`13`,sep=">")
Sales_Table <- Sales %>% group_by(path)%>%summarise(amount = sum(amount))
Sales_Table_2 <- Sales %>% group_by(path)%>%tally(sort = TRUE)
Sales_Table <- merge(Sales_Table, Sales_Table_2, by = 'path')
names(Sales_Table) <- c('path','total_conversion_value','total_conversions')
install.packages(reshape)
install.packages("reshape")
H <- heuristic_models(Sales_Table, 'path', 'total_conversions', var_value='total_conversion_value')
library(ChannelAttribution)
library(reshape)
library(ggplot2)
H <- heuristic_models(Sales_Table, 'path', 'total_conversions', var_value='total_conversion_value')
View(H)
M <- markov_model(Data, 'path', 'total_conversions', var_value='total_conversion_value', order = 1)
M <- markov_model(Sales_Table, 'path', 'total_conversions', var_value='total_conversion_value', order = 1)
R <- merge(H, M, by='channel_name')
R1 <- R[, (colnames(R)%in%c('channel_name', 'first_touch_conversions', 'last_touch_conversions', 'linear_touch_conversions', 'total_conversion'))]
colnames(R1) <- c('channel_name', 'first_touch', 'last_touch', 'linear_touch', 'markov_model')
R1 <- melt(R1, id='channel_name')
ggplot(R1, aes(channel_name, value, fill = variable)) +
geom_bar(stat='identity', position='dodge') +
ggtitle('TOTAL CONVERSIONS') +
theme(axis.title.x = element_text(vjust = -2)) +
theme(axis.title.y = element_text(vjust = +2)) +
theme(title = element_text(size = 16)) +
theme(plot.title=element_text(size = 20)) +
ylab("")
R2 <- R[, (colnames(R)%in%c('channel_name', 'first_touch_value', 'last_touch_value', 'linear_touch_value', 'total_conversion_value'))]
colnames(R2) <- c('channel_name', 'first_touch', 'last_touch', 'linear_touch', 'markov_model')
R2 <- melt(R2, id='channel_name')
ggplot(R2, aes(channel_name, value, fill = variable)) +
geom_bar(stat='identity', position='dodge') +
ggtitle('TOTAL VALUE') +
theme(axis.title.x = element_text(vjust = -2)) +
theme(axis.title.y = element_text(vjust = +2)) +
theme(title = element_text(size = 16)) +
theme(plot.title=element_text(size = 20)) +
ylab("")
View(H)
View(M)
View(H)
View(R)
View(R1)
library(ChannelAttribution)
library(reshape)
library(ggplot2)
H <- heuristic_models(Sales_Table, 'path', 'total_conversions', var_value='total_conversion_value')
M <- markov_model(Sales_Table, 'path', 'total_conversions', var_value='total_conversion_value', order = 1)
R <- merge(H, M, by='channel_name')
R
R1 <- R[, (colnames(R)%in%c('channel_name', 'first_touch_conversions', 'last_touch_conversions', 'linear_touch_conversions', 'total_conversion'))]
colnames(R1) <- c('channel_name', 'first_touch', 'last_touch', 'linear_touch', 'markov_model')
R1 <- melt(R1, id='channel_name')
ggplot(R1, aes(channel_name, value, fill = variable)) +
geom_bar(stat='identity', position='dodge') +
ggtitle('TOTAL CONVERSIONS') +
theme(axis.title.x = element_text(vjust = -2)) +
theme(axis.title.y = element_text(vjust = +2)) +
theme(title = element_text(size = 16)) +
theme(plot.title=element_text(size = 20)) +
ylab("")
R2 <- R[, (colnames(R)%in%c('channel_name', 'first_touch_value', 'last_touch_value', 'linear_touch_value', 'total_conversion_value'))]
colnames(R2) <- c('channel_name', 'first_touch', 'last_touch', 'linear_touch', 'markov_model')
R2 <- melt(R2, id='channel_name')
ggplot(R2, aes(channel_name, value, fill = variable)) +
geom_bar(stat='identity', position='dodge') +
ggtitle('TOTAL VALUE') +
theme(axis.title.x = element_text(vjust = -2)) +
theme(axis.title.y = element_text(vjust = +2)) +
theme(title = element_text(size = 16)) +
theme(plot.title=element_text(size = 20)) +
ylab("")
colnames(R)[1] <- "campaign"
R
R1 <- R[, (colnames(R)%in%c('campaign', 'first_touch_conversions', 'last_touch_conversions', 'linear_touch_conversions', 'total_conversion'))]
colnames(R1) <- c('campaign', 'first_touch', 'last_touch', 'linear_touch', 'markov_model')
R1 <- melt(R1, id='campaign')
ggplot(R1, aes(campaign, value, fill = variable)) +
geom_bar(stat='identity', position='dodge') +
ggtitle('TOTAL CONVERSIONS') +
theme(axis.title.x = element_text(vjust = -2)) +
theme(axis.title.y = element_text(vjust = +2)) +
theme(title = element_text(size = 16)) +
theme(plot.title=element_text(size = 20)) +
ylab("")
R2 <- R[, (colnames(R)%in%c('campaign', 'first_touch_value', 'last_touch_value', 'linear_touch_value', 'total_conversion_value'))]
colnames(R2) <- c('campaign', 'first_touch', 'last_touch', 'linear_touch', 'markov_model')
R2 <- melt(R2, id='campaign')
ggplot(R2, aes(campaign, value, fill = variable)) +
geom_bar(stat='identity', position='dodge') +
ggtitle('TOTAL VALUE') +
theme(axis.title.x = element_text(vjust = -2)) +
theme(axis.title.y = element_text(vjust = +2)) +
theme(title = element_text(size = 16)) +
theme(plot.title=element_text(size = 20)) +
ylab("")
item <- dbGetQuery(db, "SELECT * FROM item")
View(item)
products <- dbGetQuery(db, "SELECT b.sales_id, b.item, a.useri_id
FROM item b
JOIN sale a ON a.sales_id = b.sale_id
GROUP BY 1,2,3")
products <- dbGetQuery(db, "SELECT a.useri_id,b.sale_id, b.item
FROM item b
JOIN sale a ON a.sales_id = b.sale_id
GROUP BY 1,2,3")
products <- dbGetQuery(db, "SELECT a.user_id,b.sale_id, b.item
FROM item b
JOIN sale a ON a.sales_id = b.sale_id
GROUP BY 1,2,3")
products <- dbGetQuery(db, "SELECT a.user_id,b.sale_id, b.item_id
FROM item b
JOIN sale a ON a.id = b.sale_id
GROUP BY 1,2,3")
View(products)
products %>% group_by(item_id) %>% tally(user_id)
products %>% group_by(item_id) %>% tally(user_id) %>% arrange(desc())
products %>% group_by(item_id) %>% tally(user_id, sort = TRUE)
library(arules)
install.packages("arules")
install.packages("arules")
install.packages("arules")
install.packages("arulesViz")
library(arules)
library(arulesViz)
itemFrequencyPlot(products,topN=20,type="absolute")
P <- products %>% group_by(item_id) %>% tally(user_id, sort = TRUE)
library(dplyr)
P <- products %>% group_by(item_id) %>% tally(user_id, sort = TRUE)
library(arules)
library(arulesViz)
itemFrequencyPlot(products,topN=20,type="absolute")
itemFrequencyPlot(P,topN=20,type="absolute")
library(reshape2)
install.packages("reshape2")
library(reshape2)
library(reshape2)
library(reshape2)
library(reshape)
install.packages("reshape")
install.packages("reshape2")
library(reshape2)
library(reshape)
install.packages("reshape2")
library(reshape2)
P <- melt(products, id.vars = c("user_id","sale_id"))
View(P)
P <- dcast(P, sales_id ~ variable)
P <- dcast(P, sale_id ~ variable)
products <- products %>% group_by(sale_id) %>% mutate(ida = row_number())
P <- melt(products, id.vars = c("user_id","sale_id"))
P <- melt(products, id.vars = c("user_id","sale_id","ida"))
P <- dcast(P, user_id+sale_id ~ ida)
P_1 <- subset(P, select = -c(user_id,sale_id))
itemFrequencyPlot(P_1,topN=20,type="absolute")
View(P_1)
library(datasets)
data("Groceries")
View(Groceries)
g <- data("Groceries")
rules <- apriori(P_1, parameter = list(supp=0.001, conf=0.8)
)
inspect(Groceries)
lol <- inspect(Groceries)
P_2 <- as(P_1, "transactions")
for (i in 1:nrow(P_1)){P_1[,i]<-discretize(df[,i])}
for (i in 1:nrow(P_1)){P_1[,i]<-discretize(P_1[,i])}
P_1 <- subset(P, select = -c(user_id,sale_id))
for (i in 2:9){P_1[,i]<-discretize(P_1[,i])}
P_1 <- subset(P, select = -c(user_id,sale_id))
P_2 <- for (i in 2:9){P_1[,i]<-discretize(P_1[,i])}
P_1 <- subset(P, select = -c(user_id,sale_id))
P_1$`1` <- as.character(P_1$`1`)
P_1$`1` <- as.character(P_1$`1`)
P_1$`2` <- as.character(P_1$`2`)
P_1$`3` <- as.character(P_1$`3`)
P_1$`4` <- as.character(P_1$`4`)
P_1$`5` <- as.character(P_1$`5`)
P_1$`6` <- as.character(P_1$`6`)
P_1$`7` <- as.character(P_1$`7`)
P_1$`8` <- as.character(P_1$`8`)
P_1$`9` <- as.character(P_1$`9`)
itemFrequencyPlot(P_1,topN=20,type="absolute")
rules <- apriori(P_1, parameter = list(supp=0.001, conf=0.8)
)
is.character(P_1$`1`)
itemFrequencyPlot(as.list(P_1),topN=20,type="absolute")
txdata <- as(split(item[, "item_id"], item[, "sale_id"]), "transactions")
itemFrequencyPlot(txdata,topN=20,type="absolute")
rules <- apriori(txdata, parameter = list(supp=0.001, conf=0.8)
)
inspect(rules[1:5])
inspect(head((sort(rules, by="confidence")), n=5))
inspect(rules)
library(arules)
library(arulesViz)
itemFrequencyPlot(txdata,topN=20,type="absolute")
rules <- apriori(txdata, parameter = list(supp=0.001, conf=0.9))
rules <- apriori(txdata, parameter = list(supp=0.001, conf=0.6))
rules <- apriori(txdata, parameter = list(supp=14, conf=0.6))
rules <- apriori(txdata, parameter = list(supp=.14, conf=0.6))
rules <- apriori(txdata, parameter = list(support=0.00015, confidence=0.5))
inspect(head((sort(rules, by="confidence")), n=5))
R<-apriori(data=txdata, parameter=list(supp=0.00015,conf = 0.5,minlen=2),
appearance = list(default="rhs",lhs="180"),
control = list(verbose=F))
inspect(head((sort(R, by="confidence")), n=5))
inspect(head((sort(rules, by="confidence")), n=50))
R<-apriori(data=txdata, parameter=list(supp=0.000015,conf = 0.5,minlen=2),
appearance = list(default="180",lhs="lhs"),
control = list(verbose=F))
R<-apriori(data=txdata, parameter=list(supp=0.000015,conf = 0.5,minlen=2),
appearance = list(default="lhs",rhs="180"),
control = list(verbose=F))
inspect(head((sort(R, by="confidence")), n=5))
R<-apriori(data=txdata, parameter=list(supp=0.000015,conf = 0.5,minlen=4),
appearance = list(default="lhs",rhs="180"),
control = list(verbose=F))
inspect(head((sort(R, by="confidence")), n=5))
R<-apriori(data=txdata, parameter=list(supp=0.000015,conf = 0.5,minlen=5),
appearance = list(default="lhs",rhs="180"),
control = list(verbose=F))
inspect(head((sort(R, by="confidence")), n=5))
View(Sales)
View(Sale_Campaign)
sale_time <- dbGetQuery(db, "SELECT a.sale_dt, count(a.id) AS sale_count, sum(a.amount) AS Total_Amount
FROM sale a
GROUP BY 1
ORDER BY 1 asc")
require(RSQLite)
require(XLConnect)
require(dplyr)
require(ggplot2)
db <- dbConnect(SQLite(), dbname="Earnin.sqlite")
require(RSQLite)
install.packages("RSQLite")
install.packages("XLConnect")
install.packages("dplyr")
install.packages("dplyr")
install.packages("ggplot2")
db <- dbConnect(SQLite(), dbname="Earnin.sqlite")
sale_time <- dbGetQuery(db, "SELECT a.sale_dt, count(a.id) AS sale_count, sum(a.amount) AS Total_Amount
FROM sale a
GROUP BY 1
ORDER BY 1 asc")
sale_time <- dbGetQuery(db, "SELECT a.created_on as sale_dt, count(a.id) AS sale_count, sum(a.amount) AS Total_Amount
FROM sale a
GROUP BY 1
ORDER BY 1 asc")
View(sale_time)
sale_time <- dbGetQuery(db, "SELECT to_date(a.created_on, ,'yyyy-MM-dd') as sale_dt, count(a.id) AS sale_count, sum(a.amount) AS Total_Amount
FROM sale a
GROUP BY 1
ORDER BY 1 asc")
sale_time <- dbGetQuery(db, "SELECT to_date(a.created_on,'yyyy-MM-dd') as sale_dt, count(a.id) AS sale_count, sum(a.amount) AS Total_Amount
FROM sale a
GROUP BY 1
ORDER BY 1 asc")
sale_time <- dbGetQuery(db, "SELECT date(a.created_on,'yyyy-MM-dd') as sale_dt, count(a.id) AS sale_count, sum(a.amount) AS Total_Amount
FROM sale a
GROUP BY 1
ORDER BY 1 asc")
sale_time <- dbGetQuery(db, "SELECT CONVERT(a.created_on, getdate()) as sale_dt, count(a.id) AS sale_count, sum(a.amount) AS Total_Amount
FROM sale a
GROUP BY 1
ORDER BY 1 asc")
sale_time <- dbGetQuery(db, "SELECT date(a.created_on) as sale_dt, count(a.id) AS sale_count, sum(a.amount) AS Total_Amount
FROM sale a
GROUP BY 1
ORDER BY 1 asc")
REV_plot <- ggplot(data=sale_time, aes(x=sale_dt, y=Total_Amount, group=1)) +
geom_point(stat="identity", fill="steelblue") + geom_line() +
xlab('Date') + ylab('Total Sale Amount') +ggtitle("Revenue by Day") + geom_smooth(method = "lm",colour='red')
library(ggplot2)
REV_plot <- ggplot(data=sale_time, aes(x=sale_dt, y=Total_Amount, group=1)) +
geom_point(stat="identity", fill="steelblue") + geom_line() +
xlab('Date') + ylab('Total Sale Amount') +ggtitle("Revenue by Day") + geom_smooth(method = "lm",colour='red')
REV_plot
REV_plot <- ggplot(data=sale_time, aes(x=sale_dt, y=Total_Amount, group=1)) +
geom_point(stat="identity", fill="steelblue") + geom_line() +
xlab('Date') + ylab('Total Sale Amount') +ggtitle("Revenue by Day") + geom_smooth(method = "gam",colour='red')
REV_plot
sale_time_1 <- subset(sale_time, sale_time$sale_dt>='2017-02-01')
REV_plot_1 <- ggplot(data=sale_time_1, aes(x=sale_dt, y=Total_Amount, group=1)) +
geom_point(stat="identity", fill="steelblue") + geom_line() +
xlab('Date') + ylab('Total Sale Amount') +ggtitle("Revenue by Day") + geom_smooth(method = "gam",colour='red')
REV_plot_1
summary(sale_time$Total_Amount)
summary(sale_time_1$Total_Amount)
View(sale_time_1)
write.csv(sale_time, "/Users/neilbhatt/Desktop/EarninSales.csv")
library(readxl)
Earnin_MoM <- read_excel("~/Desktop/Earnin MoM.xlsx")
View(Earnin_MoM)
summary(Earnin_MoM$`MoM orders`)
Earnin_MoM <- read_excel("~/Desktop/Earnin MoM.xlsx")
summary(Earnin_MoM$`MoM orders`)
summary(Earnin_MoM$`MoM total amount`)
summary(Earnin_MoM$`MoM average transaction`)
summary(Earnin_MoM$`MoM average transaction`)
Earnin_last_week <- subset(Earnin_MoM, Earnin_MoM$date>'2017-02-19')
summary(Earnin_last_week$`MoM orders`)
summary(Earnin_last_week$`MoM total amount`)
summary(Earnin_last_week$`MoM average transaction`)
summary(Earnin_last_week$`MoM average transaction`)
install.package("ChannelAttribution")
install.packages("ChannelAttribution")
products <- dbGetQuery(db, "SELECT a.user_id,b.sale_id, b.item_id
FROM item b
JOIN sale a ON a.id = b.sale_id
GROUP BY 1,2,3")
products <- products %>% group_by(sale_id) %>% mutate(ida = row_number())
install.packages("dplyr")
products <- products %>% group_by(sale_id) %>% mutate(ida = row_number())
library(dplyr)
products <- dbGetQuery(db, "SELECT a.user_id,b.sale_id, b.item_id
FROM item b
JOIN sale a ON a.id = b.sale_id
GROUP BY 1,2,3")
products <- products %>% group_by(sale_id) %>% mutate(ida = row_number())
P <- melt(products, id.vars = c("user_id","sale_id","ida"))
library(reshape2)
products <- dbGetQuery(db, "SELECT a.user_id,b.sale_id, b.item_id
FROM item b
JOIN sale a ON a.id = b.sale_id
GROUP BY 1,2,3")
products <- products %>% group_by(sale_id) %>% mutate(ida = row_number())
P <- melt(products, id.vars = c("user_id","sale_id","ida"))
P <- dcast(P, user_id+sale_id ~ ida)
P_1 <- subset(P, select = -c(user_id,sale_id))
txdata <- as(split(item[, "item_id"], item[, "sale_id"]), "transactions")
library(arules)
txdata <- as(split(item[, "item_id"], item[, "sale_id"]), "transactions")
item <- dbGetQuery(db, "SELECT * FROM item")
@importClassesFrom arules transactions
#' @import methods
